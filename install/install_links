#!/bin/bash

_SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$_SCRIPT_PATH"

# Bring in the core library and enable global error handler
# No futher need to check return codes after this point ...
source ../lib/core.sh || exit 1
USE_GLOBAL_ERROR_HANDLER

_DEBUG=false
_TRACE=false

#---------------------------------------------------------------------
# Utility functions
#---------------------------------------------------------------------

function path_exists() 
{
	local path
	path="$1"

	# check if paths  exists (in one of various forms)
	# [[		: Allow for construction of complex expressions ( use of && and grouping )
	# -n		: string has non-zero length
	# -o 		: OR the conditions together
	# -f 		: file exists
	# -d		: file exists and is a directory
	# -L		: file exists and is a symlink
	[[ -n "$path" && (-f "$path" || -d "$path" || -L "$path" ) ]]
}

function dst_points_to_src() 
{
	local src
	local dst
	local target

	src="$1"
	dst="$2"

	# check if dst is a symlink that points to src
	# readlink returns blank and error if not a symlink 
	target="$(readlink $"dst")"
	[ "$target" == "$src" ]
}

#---------------------------------------------------------------------
# UI functions
#---------------------------------------------------------------------

function prompt_for_file_overwrite_action() 
{
	local src
	local dst
	local action

	src="$1"
	dst="$2"

	# -e : Enable interpretation of bashslash escapes ( to get the newline )
	msg_prompt \
		"File already exists: $(basename "$src")-->${dst}; what do you want todo? "$'\n'" \
[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

	# read one byte into action 
	# -r	: raw mode to prevent \ getting messed up
	# -s	: dont echo
	# -n x	: read x bytes
	read -r -s -n 1 action </dev/tty
	
	case "$action" in
	  o)
	    g_overwrite=true
	    ;;
	  O)
	    g_overwrite_all=true
	    ;;
	  b) 
	    g_backup=true
	    ;;
	  B)
	    g_backup_all=true
	    ;;
	  s)
	    g_skip=true
	    ;;
	  S)
	    g_skip_all=true
	    ;;
	  *)
	    ;;
	esac	
}

#---------------------------------------------------------------------
# Strategy functions
#---------------------------------------------------------------------

function destination_exists_strategy()
{
	local src
	local dst

	src="$1"
	dst="$2"

	if $g_overwrite_all || $g_backup_all || $g_skip_all; then
		# global strategy in place
		# no more action required
		return 0
	fi

	if dst_points_to_src "$src" "$dst"; then
		# destination points to source
		# skip current file
		g_skip=true;
		true; return
	fi
	
	# user intervention required
	prompt_for_file_overwrite_action "$src" "$dst"
}

function form_backup_path() 
{
	local path
	
	path="$1"
	echo "${path}.backup"
}

function form_link_path()
{
	local src dst 
	local link_type

	src="$1"
	# ##  : Greedy front trim
	# *:  : Match anything followed by last .
	link_type="${src##*.}"

	case "$link_type" in 
	dotfile) 
		dst="${HOME}/.$(basename "${src%.dotfile}")"
		;;
	symlink) 
		dst="${HOME}/$(basename "${src%.symlink}")"
		;;
	*) 
		echo "unknown symlink format ${link_type}"
		false; return;
		;;
	esac 
	
	echo "$dst"
}

#---------------------------------------------------------------------
# Coordinating functions
#---------------------------------------------------------------------

function link_file() 
{
	local src dst 
	# Visible to all functions in the stack
	local g_overwrite     # Per file action 
	local g_backup	      # Per file action
	local g_skip	      # Per file action
	local backup_path     # Per back path
	
	src="$1"
	dst="$2"
	
	# quasi-booleans ...
	# true / false are just strings, but will be "evaluated" as commands in conditionals
	g_overwrite=false 
	g_backup=false
	g_skip=false

	msg_info "Linking source path ${src} to destination path ${dst} ..."

	# work out what todo when source points to an existing destination
	if path_exists "$dst"; then

		destination_exists_strategy "$src" "$dst"

		# quasi-booleans ...
		# Note the variables are NOT surrounded by quotes
		# Hence they will be evaluated as commands
		# Note it is possible to form complex expressions
		if $g_overwrite_all || $g_overwrite; then
			msg_info "removing $dst ..."
			DEBUG rm -rf "$dst"
		elif $g_backup_all || $g_backup; then
			backup_path="$(form_backup_path "$dst")"
			msg_info "backing up $dst to $backup_path ..." 
			DEBUG mv "$dst" "$backup_path"
		elif $g_skip_all || $g_skip; then  
			msg_info "skipping $src"
			true; return
		fi
	fi

	# link target to point at source
	# -s	: create a symbolic link
	# -f	: unlink the target if it exists
	# -n	: if target is already a symlink, dont follow it
	msg_info "linking $src to $dst ..." 
	DEBUG ln -sfn "$src" "$dst"

	echo $poop
}

function link_files() 
{
	local src dst

	msg_info "Installing dotfiles ..."
	# Find:
	# -H	      : For symlinks use the file info of the linked file
	# -not -path  : Exclude .git directory and contents 
	# -o for or, -not for not
	# Complex logical statements can be built up using escaped brackets
	# Note use absolute path for find so that absolute paths are returned
	msg_info "Looking for files and directories to link within $(pwd) ..."
	find -H "$(pwd)" -maxdepth 3 \
		\( -name '*.symlink' -o -name '*.dotfile' \) \
		-not -path '*.git*' | while read -r src
	do
		dst="$(form_link_path "$src")"
		link_file "$src" "$dst"
	done
}

#---------------------------------------------------------------------
# Entry point
#---------------------------------------------------------------------

function main()
{

	# Visible to all functions in the stack
	local g_overwrite_all
	local g_backup_all
	local g_skip_all

	g_overwrite_all=false 
	g_backup_all=false 
	g_skip_all=false
	
	# e.g. fA:x
	# expect flag -f, argument -A, flag -x
	# if very first character is : then  use silent error reporting
	while getopts ":fv" opt; do
		case $opt in 
		f)
			g_overwrite_all=true
			;;
		v)
			_TRACE=true
			;;
		esac
	done

	# Change into the root git directory
	cd "$(git rev-parse --show-toplevel)"
	link_files
}

main "$@" 
exit $?

