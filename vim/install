#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$DIR" || exit

PLUGINS_PATH="./vim.dotfile/pack/plugins/start"

function get_repos_name()
(
  cd "$1" || return

  git remote show origin -n \
    | grep "Fetch URL" \
    | awk -F': ' '{print $2}' \
    | xargs -I"{}" basename "{}" .git
)

function run_custom_installer()
{
  local plugin_name plugin_path
  plugin_name="$1"
  plugin_path="$2"

  echo "Looking for custom installer for $plugin_name in $(pwd)" >&2
  if [ -f "./${plugin_name}.sh" ]; then
    echo "Found custom installer for $plugin_name" >&2
    # shellcheck source=/dev/null
    "./${plugin_name}.sh" "$plugin_path"
  else
    echo "No custom installer found for $plugin_name" >&2
  fi
}

# run in subshell as messes with cwd
function generate_helptags()
(
  cd "$1" || return

  if [ -d "./doc" ]; then
    echo "Generating helptags from doc directory" >&2
    # -u NONE --> dont run any initializations
    # -c      --> run command
    # -q      --> quit when done
    vim -u NONE -c "helptags doc" -c -q >/dev/null 2>&1
  else
    echo "No helptags to generate" >&2
  fi
)

# run in subshell as messes with cwd
function install_plugin()
(
  cd "$1" || return
  git submodule update --init --recursive
)

function main()
{
  local plugin_path
  local plugin_name

  echo "Looking for plugins in $PLUGINS_PATH" >&2
  for plugin_path in "${PLUGINS_PATH}"/*; do
    plugin_name="$(get_repos_name "$plugin_path")" || return
    echo "Installing vim plugin $plugin_name from $plugin_path" >&2
    install_plugin "$plugin_path" || return
    run_custom_installer "$plugin_name" "$plugin_path" || return
    generate_helptags "$plugin_path" || return
  done
}

main "$@"
exit $?

