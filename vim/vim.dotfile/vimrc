"
" Pathogen
"
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
syntax on
filetype plugin indent on

"
" Personal stuff
"
set number  " Show line numbers
" Leader and leader actions
let mapleader = "\<Space>"
" Save file: <Leader>w
nnoremap <Leader>w :w<CR>
" Close quickfix window
nnoremap <silent> <Leader>c :ccl<CR>

"
" Autocmds
"
" Run dispatch on save for exilir files
" This will run the default action as set for vim-dispatch
" BUG: It also runs on wq and leaves the quickfix window behind
" autocmd BufWritePost *.ex,*.exs Dispatch

" Open NERDTree on open if no files specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Quit out of vim if NERDTree is only window open
" Quit out of vim when last window is the quickfix window
" Note this doesnt fix a quickfix window left around from a wq
autocmd BufEnter * call QuitLeftoverWindows()
function! QuitLeftoverWindows()
  if &buftype=="quickfix"
    " if this window is last on screen quit without warning
      if winbufnr(2) == -1
        quit!
      endif
  endif
  if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
    quit!
  endif
endfunction

"
" Colorscheme
"
syntax enable
set background=dark
colorscheme solarized

"
" Tab setups
"
" Superseeded by sleuth.vim? Though Sleuth doesnt seem to work ...
set expandtab
set shiftwidth=2
set softtabstop=2
" Allow /ftplugin/<language>.vim files (i.e. configuration based on filetype)
" Check detected filetype using :set ft?
filetype plugin indent on
" Insert tab using shift+tab
inoremap <S-Tab> :<C-V><Tab>
" Configure vim-indent-guides
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

"
" Powerline 
"
" Enbable Powerline by adding to the vim runtime path (rtp)
let pippath = $PIP_PATH . "/powerline/bindings/vim/"
" Not sure this is right ... using exec to allow me to set rtp to a variable
" Using rtp += pippath does not work
exec "set rtp+=" . pippath
" Ensure 256 color support is enabled
set t_Co=256
" Enable unicode symbols for Powerline
let g:Powerline_symbols = "fancy"

"
" Syntastic
"
" Check status with 
" :SyntasticInfo
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Show results from all syntax checkers when multiple are specified
let g:syntastic_aggregate_errors = 1
" Configure syntax checkers
" Note - to pass options use syntastic_<filetype>_<checker>_args
let g:syntastic_javascript_checkers = ['eslint', 'jscs']
let g:syntastic_sh_checkers = ['sh', 'shellcheck']
" Pass -x to shellcheck to get it to follow sourced files
let g:syntastic_sh_shellcheck_args = "-x"
" Use Node.js based markdownlint-cli for markdown linting
let g:syntastic_markdown_mdl_exec = 'markdownlint'
let g_syntastic_markdown_mdl_args = ''
" Use Html5 tidy
let g:syntastic_html_tidy_exec = '/usr/local/bin/tidy'
let g:syntastic_css_checkers = ['csslint', 'prettycss']
" Elixir
" Need to explicitly enable elixir checking as the code runs in vim itself
" ( potential security risk )
let g:syntastic_enable_elixir_checker = 1
let g:syntastic_elixir_checkers = "elixir"

"
" YouCompleteMe
"
" Needed after moving to PyEnv for Python environment management
let g:ycm_path_to_python_interpreter='/usr/bin/python'

"
" Ctrl-P
"
" Map to <Leader>o
nnoremap <Leader>o :CtrlP<CR>
" Set local working directory
" 'r' - the nearest ancestor of the current file that contains e.g. .git
" 'a' - the directory of the current file
let g:ctrlp_working_path_mode = 'ra' 
" Exclude files and directories
" wildignore - Vim setting
" g:ctrlp_custom_ignore - Ctrl-P setting
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"
" Nerdtree
"
map <silent> <leader>n :NERDTreeFocus<CR>

"
" vim-test
"
let test#strategy = {
  \ 'nearest': 'tslime',
  \ 'file': 'tslime',
  \ 'suite': 'tslime',
\}
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>

"
" tslime
"
" reset session, window and pane info
" use <prefix q> to display tmux pane info
nmap <silent> <leader>r <plug>SetTmuxVars

"
" vim-dispatch
"
" Call vim-dispatch: <Leader>l
nnoremap <Leader>l :Dispatch<CR>
" Autocmds
" Setup dispatch action for exilir files to run dogma
" % references the current file
autocmd FIleType elixir let b:dispatch = 'dogma %'

