" Enable Pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
syntax on
filetype plugin indent on

" Personal stuff
set number  " Show line numbers

" Leader and leader actions
let mapleader = "\<Space>"
" Save file: <Leader>w
nnoremap <Leader>w :w<CR>

" Enbable Powerline
let pippath = $PIP_PATH . "/powerline/bindings/vim/"
" Not sure this is right ... using exec to allow me to set rtp to a variable
" Using rtp += pippath does not work
exec "set rtp+=" . pippath
" Ensure 256 color support is enabled
set t_Co=256
" Enable unicode symbols for Powerline
let g:Powerline_symbols = "fancy"

" Syntastic recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Show results from all syntax checkers when multiple are specified
let g:syntastic_aggregate_errors = 1
" Configure syntax checkers
" Note - to pass options use syntastic_<filetype>_<checker>_args
let g:syntastic_javascript_checkers = ['eslint', 'jscs']
let g:syntastic_sh_checkers = ['sh', 'shellcheck']
" Pass -x to shellcheck to get it to follow sourced files
let g:syntastic_sh_shellcheck_args = "-x"
" Use Node.js based markdownlint-cli for markdown linting
let g:syntastic_markdown_mdl_exec = 'markdownlint'
let g_syntastic_markdown_mdl_args = ''
" Use Html5 tidy
let g:syntastic_html_tidy_exec = '/usr/local/bin/tidy'
let g:syntastic_css_checkers = ['csslint', 'prettycss']

" Configure YouCompleteMe
" Needed after moving to PyEnv for Python environment management
let g:ycm_path_to_python_interpreter='/usr/bin/python'

" Colorscheme
syntax enable
set background=dark
colorscheme solarized

" Setup indentation to not use hard tabs
set expandtab
set shiftwidth=2
set softtabstop=2
" Configure vim-indent-guides
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

" Configure Ctrl-P
" Map to <Leader>o
nnoremap <Leader>o :CtrlP<CR>
" Set local working directory
" 'r' - the nearest ancestor of the current file that contains e.g. .git
" 'a' - the directory of the current file
let g:ctrlp_working_path_mode = 'ra' 
" Exclude files and directories
" wildignore - Vim setting
" g:ctrlp_custom_ignore - Ctrl-P setting
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

