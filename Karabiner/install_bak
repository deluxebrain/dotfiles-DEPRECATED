#!/bin/bash

PSD="${BASH_SOURCE%/*}" 

# Inherit traps on ERR within shell functions, command substitutions and subshells
set -o errtrace

# Cause any failure anywhere in a pipeline to cause the entire pipeline to fail
set -o pipefail

# Exit the script on any attempt to use an uninitialized variable
set -o nounset

# Exit the script if any statement returns a non-true return code
set -o errexit

DEPENDS_ON errors \
	path \
	exists \
	prompt

PIPE=$(mktemp -u)
mkfifo $PIPE
exec 3>&1
exec > >(tee $PIPE) 2>&1 1>&3

function exit_handler()
{
	rm $PIPE
	exec 3>&-
}
trap 'exit_handler' EXIT

function error_handler()
{
	local message=$(head -n1 < $PIPE) 
	local line_no="$1"
	local code="${2:-1}"
	msg_error "Error on line ${line_no}: ${message}; exiting with status ${code}"
	exit "${code}"
}
trap 'error_handler ${LINENO} $?' ERR

form_and_verify_path()
{
	local path="$(path_combine "$@")"
	file_exists? "${path}" || 
	{
		fail "Unable to find file ${path}"
	}	
	echo "${path}"
}

main()
{
	# As required by Seil when remapping the caps lock key:
	# Umap the caps lock key within OS X preferences
	local path="$(form_and_verify_path "${PSD}" unmap_caps.scpt)"
	msg_info "Running ${path}"
	osascript "${path}" 

	# Steps to create the plist in the first place:
	# plutil -convert xml1 -o ~/tmp/karabiner.plist ~/Library/Preferences/org.pqrs.Karabiner.plist
	path="$(form_and_verify_path "${PSD}" karabiner.plist)"
	msg_info "Running plist defaults into Karabiner from ${path} ..."
	defaults import org.pqrs.Karabiner "${path}"

	# Run in Karabiner defaults
	path="$(form_and_verify_path "${PSD}" karabiner_import)"
	msg_info "Running in Karabiner defaults from ${path} ..."
	"${path}"
	
	# Restart Kabarina
	msg_info "Restarting Karabiner ..."
	/Applications/Karabiner.app/Contents/Library/bin/karabiner relaunch

	# Run in Seil default
	path="$(form_and_verify_path "${PSD}" seil_import)"
	msg_info "Running in Seil defaults from ${path} ..."
	"${path}"

	# Restart Seil
	msg_info "Restarting Seil ..."
	/Applications/Seil.app/Contents/Library/bin/seil relaunch
}

main 
exit $?
