#!/usr/bin/env bash

SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_PATH" || exit 1

ITERM_PROFILE_DIR="${HOME}/Library/Application Support/iTerm2/DynamicProfiles"

function join()
{
  local IFS="$1"
  shift # shift pass the first argument (the separator)
  # expand to "$2s$3s$4s..." where s is the specific separator
  echo "$*"
}

function path_combine()
{
  join "/" "${@%/}"
}

form_and_verify_path()
{
  local path

  path="$(path_combine "$@")"
  if [[ ( -z "$path" ) || ( ! -f "$path" ) ]]; then
    echo "Unable to find path $path" >&2
    return 1
  fi

  echo "${path}"
}

function set_iterm_profile
{
  if [ -n "${TMUX}" ]; then
    echo -ne "\033Ptmux;\033\033]50;SetProfile=$1\007\033\\"
  else
    echo -ne "\033]50;SetProfile=$1\007"
  fi
}

function setup_profile()
{
  local profile_path colorscheme_path

  # Load config
  echo "Loading profile config from $(pwd)/profile.conf..." >&2
  source ./profile.conf || return 1

  # form profile plist file path
  if [[ ( -z "${ITERM_PROFILE_DIR}" ) || ( ! -d "${ITERM_PROFILE_DIR}" ) ]]; then
    echo "Export variable ITERM_PROFILE_DIR not set or not valid path" >&2
    return 1
  fi
  profile_path="$(path_combine "${ITERM_PROFILE_DIR}" "${PROFILE_NAME}".plist)"

  # form path to colorscheme plist
  colorscheme_path="$(form_and_verify_path \
    "/Users/${USER}" \
    ".themes" \
    "${PROFILE_COLORSCHEME_NAME}")"
  if (( $? != 0 )); then
    echo "Unable to form path to colorscheme list" >&2
    return 1
  fi

  echo "Using colorscheme from ${colorscheme_path}" >&2

  # merge the following to form the profile:
  # - The transformed template
  # - The json converted colorscheme plist
  # ---
  # -s
  #	slurp; run entire stream into single array and run filters once
  #	i.e. form single array from elements from all files
  # .[0].Profiles[0]
  #	select the first element of the Profiles field of the first outer array
  # +=
  #	append the rhs to the lhs
  # .[1]
  #	select the second element of the outer array
  # | .[0]
  #	run a second filter that only returns the first element
  # <(...)
  #	use subshells to pipe multiple arguments to jq
  # ---
  echo "Transforming profile_template.plist to form profile at ${profile_path}" >&2
  jq -s '.[0].Profiles[0] += .[1] | .[0]' \
    <(envsubst < profile_template.plist) \
    <(plutil -convert json "${colorscheme_path}" -o -) \
    > "${profile_path}"

  echo "Configuring iTerm to use ${PROFILE_NAME}" >&2
  set_iterm_profile "${PROFILE_NAME}"
}

main()
{
  setup_profile || return
}

main
exit $?

