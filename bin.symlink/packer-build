#!/usr/bin/env bash

# wrapper for:
# packer build \
#   -var 'autounattend=myautounattend.xml'
#   template.json
# packer build \
#   -var-file=myvarfile.json
#   template.json
# for myvarfile.json
# { "autounattend": "myautounattend.xml" }

# bring in gnu getopt ( a key-only package )
PATH="$(brew --prefix)"/opt/gnu-getopt/bin:$PATH

# dry run mode ( log to stdout intended actions without performing them )
DRY_RUN=false

# global to store path to temp autounattend file
TMP_AUTOUNATTEND=

function exit_handler()
{
        if [[ -n "$TMP_AUTOUNATTEND" && -f "$TMP_AUTOUNATTEND" ]]; then
                echo "Deleting temp file $TMP_AUTOUNATTEND ..." >&2
                rm -rf "$TMP_AUTOUNATTEND"
        fi
}

function usage()
{
        cat <<EOF
Usage: $0
        --dry-run ( simulated run ) 
        <autounattend-file> 
        -- {packer build options and arguments}
EOF

        return 1
}

function create_tmpfile()
{
        local tmpfoo
        local tmpfile

        # generate temp file prefix from script name
        tmpfoo="$(basename "$0")"

        # -q: suppress error messages ( we'll deal with them ourselves )
        # -t: use supplied prefix and the TMPDIR ( if set )
        tmpfile="$(mktemp -q -t "$tmpfoo")"

        if [ $? -ne 0 ]; then
                echo "Unable to create temp file" >&2
                return 1
        fi

        echo "$tmpfile"
}

function transform_autounattend()
{
        local raw_autounattend
        local transformed_autounattend

        raw_autounattend="$1"
        if [ -z "$raw_autounattend" ] || [ ! -f "$raw_autounattend" ]; then
                echo "Unable to locate specified autounattend file ${raw_autounattend:-EMPTY}" >&2
                return 1
        fi

        transform_autounattend="$2"
        if [ -z "$transformed_autounattend" ] || [ ! -f "$transformed_autounattend" ]; then
                echo "Invalid path specified for autounattend transform ${transformed_autounattend:-EMPTY}" >&2
        fi

        # source in any envionment variables required for the transform 
        # TODO this will need expanding to deal with different transforms
        if  [ -f "$HOME/.secrets/licenses" ]; then
                # shellcheck source=/dev/null
                source "$HOME/.secrets/licenses"
        fi

        # transform the autounattend file
        envsubst < "$raw_autounattend" > "$transformed_autounattend"
        if [ $? -ne 0 ]; then
                echo "Unable to transform autounattend file ${raw_autounattend} to temporary file ${transformed_autounattend}" >&2
                return 
        fi
}

function main()
{
        local parsed_options
        local autounattend_file
        declare -a packer_args
        local packer_command

        # use gnu getopt to parse the command line arguments
        # gnu getopt is POSIX compliant in that it stops parsing at --
        # Note we need to specify -o - (zero options / non-posix) to pickup the positional argument
        # - this allows us to use the pre -- arguments for this script
        # - and then forward the post -- arguments to packer build
        # -q            : quiet mode - we will handle any errors ourselves
        # -n foo        : report error as being from foo
        # -o            : specify single character options
        # --long / -l   : specify multi-character options
        # -/+           : POSIX/non-POSIX mode ( yes/no stop on first non-option)
        parsed_options="$(getopt -q -n "$(basename "$0")" -o -n --long dry-run -- "$@")"
        [ $? -ne 0 ] && return 1;

        # wang the parsed options back into script arguments
        eval set -- "$parsed_options"

        while true; do
                case "$1" in
                        --dry-run|n) DRY_RUN=true;;
                        --) break ;;
                        *) autounattend_file="$1";;
                esac
                shift # shift off the argument we have just inspected
        done
        shift # shift off the "--"

        # the arguments that are left (post the --) can then be passed to packer build
        packer_args="$*"

        # guard
        if [ -z "${autounattend_file+.}" ] || [ -z "$packer_args" ]; then
                usage; return
        fi
                
        # transform the autounattend file to a temporary file
        TMP_AUTOUNATTEND="$(create_tmpfile)" || return
        transform_autounattend "$autounattend_file" "$TMP_AUTOUNATTEND" || return

        # form packer build command from the passed in args and the temp autounattend
        packer_command="packer build $packer_args -var "autounattend=${TMP_AUTOUNATTEND}""

        if $DRY_RUN; then
                echo "$packer_command"
        else
                eval "$packer_command" || return 1
        fi
}

# wire up the traps
trap 'exit_handler' EXIT

main "$@"
exit $?

