#!/bin/bash

# bring in gnu getopt ( a key only package )
PATH="$(brew --prefix)"/opt/gnu-getop/bin:$PATH

function exit_handler()
{
        # check the TMPFILE variable has been set and that it points to an existing file
        if [[ -n "$TMPFILE" && -f "$TMPFILE" ]]; then
                rm -rf "$TMPFILE"
        fi
}

function usage()
{
        cat <<EOF
Usage: $0 <template-file> -v <variable-file> -a <unattend-file> 
EOF

        return 1
}

function main()
{
        local autounattend_file
        local packer_args

        # use gnu getopt to parse the command line arguments
        # gnu getopt is POSIX compliant in that it stops parsing at --
        # this allows us to use the pre -- arguments for this script
        # and then forward the post -- arguments to packer build
        eval set -- "$(getopt -q -n "$(basename "$0")" -- "$@")"
        while true; do
                case "$1" in
                        --) break ;;
                        *) autounattend_file="$1";;
                esac
                shift # shift off the argument we have just inspected
        done
        shift # shift off the "--"

        # the arguments that are left (post the --) can then be passed to packer build
        packer_args="$*"

        echo "$autounattend_file"
        echo "$packer_args"
}



function main()
{
        local var_file
        local template
        local autounattend

        # non-positional arguments
        while getopts "v:a:" opt; do
                case "$opt" in 
                        v) 
                                var_file="$OPTARG"
                                ;;
                        a)
                                autounattend="$OPTARG"
                                if [ ! -f "$autounattend" ]; then
                                        echo "Unable to locate specified autounattend ${autounattend}" >& 2
                                        return 1
                                fi 
                                ;;
                        \?)
                                echo "Invalid argument: -$OPTARG" >&2
                                return 1
                                ;;
                        :)
                                echo "Option -$OPTARG requires an argument" >&2
                                return 1
                                ;;
                esac
        done

        # check required positional argument was passed
        if [ ! $(( $# - OPTIND )) -lt 1 ]; then
                usage
                return
        fi

        # use indirect expansion to get nth positional argument
        template="${!OPTIND}"

        if [ ! -f "$template" ]; then
                echo "Unable to locate specified template ${template}" >& 2
                return 1;
        fi

        if [ -z "${autounattend+.}" ]; then

                # source in any environment variables required for the transform
                if  [ -f "$HOME/.secrets/licenses" ]; then
                        # shellcheck source=/dev/null
                        source "$HOME/.secrets/licenses"
                fi

                # create tempfile to store transformed autounattend
                # -q: suppress error messages ( we'll deal with them ourselves )
                # -t: use supplied prefix and the TMPDIR (if set )
                tmpfoo="$(basename "$0")"
                TMPFILE="$(mktmp -q -t "$tmpfoo")"
                if [ $? -ne 0 ]; then
                        echo "$0: Can't create temp file, exiting ..." >&2
                        return 1
                fi

                # transform autounattend
                envsubst < "$autounattend" > "$TMPFILE"
        fi

        packer_build
}

trap 'exit_handler' EXIT

main "$@"
exit $?

