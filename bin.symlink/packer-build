#!/bin/bash

function exit_handler()
{
        # check the TMPFILE variable has been set and that it points to an existing file
        if [[ ! -z "${TMPFILE+.}" && -f "${TMPFILE}" ]]; then
                rm -rf "${TMPFILE}"
        fi
}

function usage()
{
        cat <<EOF
Usage: $0 <template-file> -v <variable-file> -a <unattend-file> 
EOF

        return 1
}

function build_command()
{
        local command_string

        echo "$command_string"
}

function packer_build()
{
        if [ -z "${autounattend+.}" ]; then
                if [ -z "${var_file+.}" ]; then
                        packer build /
                                -var "autounattend=$TMPFILE" /
                                -var-file="$var_file" /
                                $template
                else
                        packer build /
                                -var "autounattend=$TMPFILE" /
                                $template 
                fi
        else

                if [ -z "${var_file+.}" ]; then
                        packer build /
                                -var-file="var_file" /
                                $template
                else
                        packer build "$template"
                fi       
        fi
}

function main()
{
        local var_file
        local template
        local autounattend

        # non-positional arguments
        while getopts "v:a:" opt; do
                case "$opt" in 
                        v) 
                                var_file="$OPTARG"
                                ;;
                        a)
                                autounattend="$OPTARG"
                                if [ ! -f "$autounattend" ]; then
                                        echo "Unable to locate specified autounattend ${autounattend}" >& 2
                                        return 1
                                fi 
                                ;;
                        \?)
                                echo "Invalid argument: -$OPTARG" >&2
                                return 1
                                ;;
                        :)
                                echo "Option -$OPTARG requires an argument" >&2
                                return 1
                                ;;
                esac
        done

        # check required positional argument was passed
        if [ ! $(( $# - OPTIND )) -lt 1 ]; then
                usage
                return
        fi

        # use indirect expansion to get nth positional argument
        template="${!OPTIND}"

        if [ ! -f "$template" ]; then
                echo "Unable to locate specified template ${template}" >& 2
                return 1;
        fi

        if [ -z "${autounattend+.}" ]; then

                # source in any environment variables required for the transform
                if  [ -f "$HOME/.secrets/licenses" ]; then
                        # shellcheck source=/dev/null
                        source "$HOME/.secrets/licenses"
                fi

                # create tempfile to store transformed autounattend
                # -q: suppress error messages ( we'll deal with them ourselves )
                # -t: use supplied prefix and the TMPDIR (if set )
                tmpfoo="$(basename "$0")"
                TMPFILE="$(mktmp -q -t "$tmpfoo")"
                if [ $? -ne 0 ]; then
                        echo "$0: Can't create temp file, exiting ..." >&2
                        return 1
                fi

                # transform autounattend
                envsubst < "$autounattend" > "$TMPFILE"
        fi

        packer_build
}

trap 'exit_handler' EXIT

main "$@"
exit $?

