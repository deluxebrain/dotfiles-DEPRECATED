#!/bin/bash

# Executed by non-login shells:
#- new shell created using `bash`
#- executing a script
#- cron

# start ssh-agent, using existing agent if available;
# note this is not absolutely necessary if the window manager is set to
# auto-start ssh-agent on first use (e.g. as with OS X ssh-agent launchd integration);
function start_ssh_agent()
{
  # detect if ssh-agent is running
  # &> redirects stdout and stderr
  # (equivalent to > /dev/null 2>&1)
  ssh-add -l &> /dev/null

  # test (with expansion) the exit status (2 means actual error)
  if [ "$?" == 2 ]; then
    # test exists and is readable ( -r )
    [[ -r ~/.ssh-agent ]] && eval "$(< ~/.ssh-agent)" > /dev/null

    ssh-add -l &> /dev/null
    if [ "$?" == 2 ]; then
      # scope the umask to the file using subshell
      # u=rwx,go=e,
      # ssh-agent prints the necessary shell commands
      # to launch ssh-agent
      (umask 066; ssh-agent > ~/.ssh-agent)
      eval "$(< ~/.ssh-agent)" > /dev/null
      ssh-add

      # kill ssh-agent on shell exit (EXIT)
      # note $SSH_AGENT_PID is not set for system ssh-agent
      # so this will only kill shell launched agents
      trap 'kill $SSH_AGENT_PID' EXIT
    fi
  fi
}

function start_completions()
{
  # enable bash completion
  # shellcheck source=/dev/null
  if [ -f "$(brew --prefix)"/etc/bash_completion ]; then
    source "$(brew --prefix)"/etc/bash_completion
  fi

  # Enable tab completion for `g` by marking it as an alias for `git`
  if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
    complete -o default -o nospace -F _git g;
  fi;

  # Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
  [ -e "$HOME/.ssh/config" ] && \
    complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | \
    grep -v "[?*]" | \
    cut -d " " -f2- | \
    tr ' ' '\n')" scp sftp ssh;
}

function start_powerline()
{
  powerline-daemon -q
  export POWERLINE_BASH_CONTINUATION=1
  export POWERLINE_BASH_SELECT=1
  # shellcheck source=/dev/null
  source "${SYS_PIP_PACKAGES_PATH}/powerline/bindings/bash/powerline.sh"
}

function start_pyenv()
{
  if which pyenv > /dev/null; then
    # use Homebrew directories rather that ~/.pyenv
    export PYENV_ROOT=/usr/local/var/pyenv
    eval "$(pyenv init -)"
  fi

  if which pyenv-virtualenv-init > /dev/null; then
    eval "$(pyenv virtualenv-init -)"
  fi
}

function start_nvm()
{
  [ ! -d "$HOME/.nvm" ] && mkdir -p "$HOME/.nvm"
  export NVM_DIR="$HOME/.nvm"
  # shellcheck source=/dev/null
  . "$(brew --prefix nvm)/nvm.sh"
}

# called when run from an non-interactive shell
function when_non_interactive()
{
  # Nothing to see here ...
  :
}

# called when run from an interactive shell
function when_interactive()
{
  # Bring in aliases
  # shellcheck source=/dev/null
  [ -f "${HOME}"/.environment/aliases ] && source "${HOME}"/.environment/aliases

  start_pyenv
  start_nvm
  start_ssh_agent
  start_completions

  [ -z "${USE_POWERLINE+.}" ] || start_powerline
}

# `.bashrc` is pointed to by $BASH_ENV for non-interactive shells
# Hence this file is split into interactive (e.g terminal) and non-interfactive (e.g. Cron) sections
if [[ $- == *i* ]]; then
  when_interactive
else
  when_non_interactive
fi

# Override the exit command so that it:
# - kills the current tmux session
# - closes the window ( works because the tmux session was created via exec )
# If not in tmux sesison or if multiple panes then use builtin exit
# unset exit
# NOTE don't do this until tmux has started up
function exit()
{
  local panes

  if [ -z "${TMUX}" ]; then
    builtin exit
  else
    panes=$(tmux list-panes | wc -l)
    if (( panes > 1 )); then
      builtin exit
    else
      # Close the current window and detach from the session
      # NOTE this appears to be the only way to achieve this ...
      # 1. As soon as you kill the window this function will stop running
      # 2. If you just "detach" then session and iterm console are destroyed
      #       but the window remains attached to the parent session
      tmux kill-window \; detach
    fi
  fi
}

# prevent pollution of shell by deleting all local variables and functions
unset -f start_completions
unset -f start_powerline
unset -f when_non_interactive
unset -f when_interactive

