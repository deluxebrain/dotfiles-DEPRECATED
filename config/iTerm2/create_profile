#!/bin/bash

EXEC_PATH="${BASH_SOURCE%/*}"

function _directory_exists?()
{
	[ -n "$1" -a -d "$1" ]
}

function _file_exists?()
{
	[ -n "$1" -a -f "$1" ]
}

function _join()
{
	local IFS="$1"
	shift
	echo "$*"
}

function _form_path()
{
	_join "/" "${@%/}"
}

function _git_repos_root()
{
	git rev-parse --show-toplevel
}

function main()
{
	# Load config
        local config_path="$(_form_path "${EXEC_PATH}" "create_profile.conf")"
        _file_exists? "${config_path}" || {
                echo "ERROR: Unable to find config file ${config_path}"
                false; return
        }
        source ${config_path} || return

	# Create placeholder profile plist file
	_directory_exists? "${ITERM_PROFILE_DIR}" || {
		echo "ERROR: Export variable ITERM_PROFILE_DIR not set or not valid path"
		false; return
	}
	local profile_path="$(_form_path "${ITERM_PROFILE_DIR}" "${_PROFILE_NAME}.plist")"
	echo "INFO: Creating profile ${_PROFILE_NAME} as ${profile_path} ..."
	cat /dev/null >| "${profile_path}" || {
		echo "ERROR: Unable to create profile ${profile_path}"
		false; return
	}

	# form path to template
	local template_path="$(_form_path "${EXEC_PATH}" "profile_template.plist")"
	_file_exists? "${template_path}" || {
		echo "ERROR: Unable to find profile template ${template_path}"
		false; return
	}

	# form path to colorscheme plist
	local colorscheme_path="$(_form_path \
		"$(_git_repos_root)" \
		"themes" \
		"${_PROFILE_COLORSCHEME_NAME}")"
	_file_exists? "${colorscheme_path}" || {
		echo "ERROR: Unable to find colorscheme referenced by ${_PROFILE_COLORSCHEME_NAME}"
		false; return
	}

	# merge the following to form the profile:
	# - The transformed template
	# - The json converted colorscheme plist
	# NB: Use subshells to pipe to multiple arguments of jq
	echo "INFO; Transforming ${template_path} to form profile"
	jq -s '.[0] * .[1]' \
		<(envsubst < "${template_path}") \
		<(plutil -convert json "${colorscheme_path}" -o -) \
		> "${profile_path}"
}

main
exit $?

