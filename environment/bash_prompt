#-------------------------------------------------------------
# Pens
#+ http://linuxcommand.org/lc3_adv_tput.php
#-------------------------------------------------------------

# Example usages
#+ To set for all subsequent output
#$ echo -en ${WHITE}${ON_RED}

#+ To output text in specific ped
#$ echo ${WHITE}${ON_RED}...${PEN_RESET}

STYLE_BOLD="$(tput bold)"
STYLE_REV="$(tput rev)"
SYTLE_UNDERLINE_START="$(tput smul)"
STYLE_UNDERLINE_STOP="$(tput rmul)"
STYLE_STANDOUT_START="$(tput smso)"
STYLE_STANDOUT_END="$(tput rmso)"
STYLE_RESET="$(tput sgr0)"

BLACK="$(tput setaf 0)"
BLUE="$(tput setaf 33)"
CYAN="$(tput setaf 37)"
GREEN="$(tput setaf 64)"
ORANGE="$(tput setaf 166)"
PURPLE="$(tput setaf 125)"
RED="$(tput setaf 1)"
VIOLET="$(tput setaf 61)"
WHITE="$(tput setaf 15)"
YELLOW="$(tput setaf 136)"
NC="$(tput setaf 9)"

BBLACK=${STYLE_BOLD}${BLACK}
BBLUE=${STYLE_BOLD}${BLUE}
BCYAN=${STYLE_BOLD}${CYAN}
BGREEN=${STYLE_BOLD}${GREEN}
BORANGE=${STYLE_BOLD}${ORANGE}
BPURPLE=${STYLE_BOLD}${PURPLE}
BRED=${STYLE_BOLD}${RED}
BVIOLET=${STYLE_BOLD}${VIOLET}
BWHITE=${STYLE_BOLD}${WHITE}
BYELLOW=${STYLE_BOLD}${YELLOW}

ON_BLACK="$(tput setab 0)"
ON_BLUE="$(tput setab 33)"
ON_CYAN="$(tput setab 37)"
ON_GREEN="$(tput setab 64)"
ON_ORANGE="$(tput setab 166)"
ON_PURPLE="$(tput setab 125)"
ON_RED="$(tput setab 1)"
ON_VIOLET="$(tput setab 61)"
ON_WHITE="$(tput setab 15)"
ON_YELLOW="$(tput setab 136)"
ON_NC="$(tput setab 9)"

PEN_RESET=${NC}${STYLE_RESET}
PEN_WARN=${BWHITE}${ON_ORANGE}
PEN_ALERT=${BWHITE}${ON_RED}
PEN_HIGHLIGHT=${BYELLOW}${ON_BLUE}

#-------------------------------------------------------------
# Prompt
#-------------------------------------------------------------

function prompt_git_minutes()
{
	! ingit && return;
    	
	local mins 
	mins=$(git_min 2> /dev/null)
	[ $? -ne 0 ] && { false; return; }

    	if [ $mins -gt $GIT_COMMIT_ALERT ]; then
        	local color=${RED}
    	elif [ $mins" -gt "$GIT_COMMIT_WARN ]; then
        	local color=${ORANGE}
    	else
        	local color=${GREEN}
    	fi

    	echo "\[${color}\]${mins}m $(git_histogram)\[${PEN_RESET}\]"
}

function prompt_git_branch() 
{
	! ingit && return;
	local s branchname

    	if ! ingitd; then

        	# Ensure the index is up to date.
        	git update-index --really-refresh -q &>/dev/null;

        	# Check for uncommitted changes in the index.
        	if ! $(git diff --quiet --ignore-submodules --cached); then
           		 s+='+';
        	fi;

        	# Check for unstaged changes.
        	if ! $(git diff-files --quiet --ignore-submodules --); then
            		s+='!';
        	fi;

        	# Check for untracked files.
        	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            		s+='?';
        	fi;

        	# Check for stashed files.
        	if $(git rev-parse --verify refs/stash &>/dev/null); then
            		s+='$';
        	fi;

    	fi;

	# Get the short symbolic ref.
	#+ If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    	#+  Otherwise, just give up.
    	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        	git rev-parse --short HEAD 2> /dev/null || \
        	echo '(unknown)')";

	[ -n "${s}" ] && s=" [${s}]";

	echo "\[${VIOLET}\]${branchName}\[${BLUE}\]${s}\[${PEN_RESET}\]";
}

function prompt_user()
{
	local color
	if [[ ${USER} == "root" ]]; then
		color=${RED}
	else
		color=${ORANGE}
	fi
	echo -e "\[${color}\]\u\[${PEN_RESET}\]"
}

function prompt_connection() 
{
	local color
	if [[ "${SSH_TTY}" ]]; then
		color=${BRED}
	else
		color=${YELLOW}
	fi
	echo -e "\[${color}\]\h\[${PEN_RESET}\]"
}

function prompt_jobs()
{
	local color
	if [ $(jobs -s | wc -l) -gt "0" ]; then
		color=${BRED}
	elif [ $(jobs -r | wc -l) -gt "0" ]; then
		color=${BORANGE}
	else
		color=${WHITE}	
	fi
	echo -e "\[${color}\]\$ \[${PEN_RESET}]"
}

# Build prompt
#+ This is executed before displaying the prompt
#+ Append history from this session to the history file
PROMPT_COMMAND="history -a"

# Reset
echo -en ${PEN_RESET}
PS1=""

# User@Host (with connection type info):
PS1+="$(prompt_jobs)"
PS1+="$(prompt_git_minutes)"
PS1+="$(prompt_user)"
PS1+="\[${WHITE}\] @ $(prompt_connection)"
PS1+="\[${WHITE}\] in \[${GREEN}\]\w"
PS1+="\[${WHITE}\] on $(prompt_git_branch)"
PS1+="\n"
PS1+="$(prompt_jobs)"

# Set title of current xterm:
PS1=${PS1}"\[\e]0;[\u@\h] \w\a\]"

# Set title of lines 2 and above for multiline statements
PS2="\[${YELLO}\]→ \[${PEN_RESET}\]"

unset -f prompt_git_minutes
unset -f prompt_git_branch
unset -f prompt_user
unset -f prompt_connection
unset -f prompt_jobs

