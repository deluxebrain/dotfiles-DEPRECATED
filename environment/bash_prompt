#-------------------------------------------------------------
# Pens
#+ http://linuxcommand.org/lc3_adv_tput.php
#-------------------------------------------------------------

# Example usages
#+ To set for all subsequent output
#$ echo -en ${WHITE}${ON_RED}

#+ To output text in specific ped
#$ echo ${WHITE}${ON_RED}...${PEN_RESET}

STYLE_BOLD="$(tput bold)"
STYLE_REV="$(tput rev)"
SYTLE_UNDERLINE_START="$(tput smul)"
STYLE_UNDERLINE_STOP="$(tput rmul)"
STYLE_STANDOUT_START="$(tput smso)"
STYLE_STANDOUT_END="$(tput rmso)"
STYLE_RESET="$(tput sgr0)"

BLACK="$(tput setaf 0)"
BLUE="$(tput setaf 33)"
CYAN="$(tput setaf 37)"
GREEN="$(tput setaf 64)"
ORANGE="$(tput setaf 166)"
PURPLE="$(tput setaf 125)"
RED="$(tput setaf 1)"
VIOLET="$(tput setaf 61)"
WHITE="$(tput setaf 15)"
YELLOW="$(tput setaf 136)"
NC="$(tput setaf 9)"

BBLACK=${STYLE_BOLD}${BLACK}
BBLUE=${STYLE_BOLD}${BLUE}
BCYAN=${STYLE_BOLD}${CYAN}
BGREEN=${STYLE_BOLD}${GREEN}
BORANGE=${STYLE_BOLD}${ORANGE}
BPURPLE=${STYLE_BOLD}${PURPLE}
BRED=${STYLE_BOLD}${RED}
BVIOLET=${STYLE_BOLD}${VIOLET}
BWHITE=${STYLE_BOLD}${WHITE}
BYELLOW=${STYLE_BOLD}${YELLOW}

ON_BLACK="$(tput setab 0)"
ON_BLUE="$(tput setab 33)"
ON_CYAN="$(tput setab 37)"
ON_GREEN="$(tput setab 64)"
ON_ORANGE="$(tput setab 166)"
ON_PURPLE="$(tput setab 125)"
ON_RED="$(tput setab 1)"
ON_VIOLET="$(tput setab 61)"
ON_WHITE="$(tput setab 15)"
ON_YELLOW="$(tput setab 136)"
ON_NC="$(tput setab 9)"

PEN_RESET=${NC}${STYLE_RESET}
PEN_WARN=${BWHITE}${ON_ORANGE}
PEN_ALERT=${BWHITE}${ON_RED}
PEN_HIGHLIGHT=${BYELLOW}${ON_BLUE}

#-------------------------------------------------------------
# Prompt
#-------------------------------------------------------------

function prompt_git() 
{
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    #+ Returns 0 if in git repository, otherwise error code ( $? != 0 )
    git rev-parse --is-inside-work-tree &>/dev/null || return;

    # check if the current directory is in .git before running git checks
    #+ Return true or false if in git working directory and .git directory accordingly
    #+ Returns error code if not in git working directory
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+';
        fi;

        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!';
        fi;

        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            s+='?';
        fi;

        # Check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$';
        fi;

    fi;

    # Get the short symbolic ref.
    #+ If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
    #+  Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${blue}${s}";
}

# Test user
function user_color()
{
	if [[ ${USER} == "root" ]]; then
		echo -en ${RED}
	elif [[ ${USER} != $(logname) ]]; then		# logged in name
		echo -en ${BRED}			# not logged in user
	else
		echo -en ${BCYAN}			# user is normal
	fi
}

# Test connection type
#+ http://www.xfree86.org/current/X.7.html#sect4
function connection_color() 
{
	if [[ -n "${SSH_CONNECTION}" ]]; then
		echo -en ${GREEN}			# ssh
	elif [[ -n "${DISPLAY%%:0*}" ]] ; then
		echo -en ${PEN_ALERT}			# remote, not ssh
	else
		echo -en ${BCYAN}
	fi
}

# Test jobs
function job_color()
{
	if [ $(jobs -s | wc -l) -gt "0" ]; then
		echo -en ${BRED}
	elif [ $(jobs -r | wc -l) -gt "0" ]; then
		echo -en ${BCYAN}
	else
		echo -en ${WHITE}	
	fi
}

# Build prompt
#+ This is executed before displaying the prompt
#+ Append history from this session to the history file
PROMPT_COMMAND="history -a"

# Reset
echo -en ${PEN_RESET}
PS1=""

# User@Host (with connection type info):
PS1=${PS1}"\[$(user_color)\]\u\[${PEN_RESET}\]@\[$(connection_color)\]\h\[${PEN_RESET}\]"

# Prompt (with 'job' info):
PS1=${PS1}"\[\$(job_color)\]\$\[${PEN_RESET}\] "

# Set title of current xterm:
PS1=${PS1}"\[\e]0;[\u@\h] \w\a\]"

