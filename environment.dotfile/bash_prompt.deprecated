#
# Deprecated in favour of Powerline
#

function _prompt_git_minutes()
{
	local mins 
	mins=$(git_mins 2> /dev/null)
	[ $? -ne 0 ] && { false; return; }

    	if [ $mins -gt $GIT_COMMIT_ALERT ]; then
        	local color=${RED}
    	elif [ $mins" -gt "$GIT_COMMIT_WARN ]; then
        	local color=${ORANGE}
    	else
        	local color=${GREEN}
    	fi

    	echo "${color}${mins}m${PEN_RESET}"
}

function _prompt_git_branch() 
{
	local s branchname

    	if ! ingitd; then

        	# Ensure the index is up to date.
        	git update-index --really-refresh -q &>/dev/null;

        	# Check for uncommitted changes in the index.
        	if ! $(git diff --quiet --ignore-submodules --cached); then
           		 s+='+';
        	fi;

        	# Check for unstaged changes.
        	if ! $(git diff-files --quiet --ignore-submodules --); then
            		s+='!';
        	fi;

        	# Check for untracked files.
        	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            		s+='?';
        	fi;

        	# Check for stashed files.
        	if $(git rev-parse --verify refs/stash &>/dev/null); then
            		s+='$';
        	fi;

    	fi;

	# Get the short symbolic ref.
	#+ If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    	#+  Otherwise, just give up.
    	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        	git rev-parse --short HEAD 2> /dev/null || \
        	echo '(unknown)')";

	[ -n "${s}" ] && s="[${s}]";

	echo "${VIOLET}${branchName}${BLUE}${s}${PEN_RESET}";
}

function _prompt_git()
{
	echo " ($(prompt_git_minutes)|$(prompt_git_branch))"
}

function _prompt_user()
{
	local is_root=$1
	local color
	if [ $is_root -eq 0 ]; then
		color=${RED}
	else
		color=${ORANGE}
	fi
	echo "${color}\u${PEN_RESET}"
}

function _prompt_connection() 
{
	local color
	if [[ "${SSH_TTY}" ]]; then
		color=${BRED}
	else
		color=${YELLOW}
	fi
	echo "${WHITE}@${color}\h${PEN_RESET}"
}

function _prompt_caret()
{
	local is_root=$1
	
	local color
	if [ $(jobs -s | wc -l) -gt "0" ]; then
		color=${BRED}
	elif [ $(jobs -r | wc -l) -gt "0" ]; then
		color=${BORANGE}
	else
		color=${WHITE}	
	fi

	local caret
	if [ $is_root -eq 0 ]; then
		caret="#"
	else
		caret="$"
	fi

	echo "${color} ${caret}${PEN_RESET}"
}

function _prompt_history()
{
	local color
	if [ "$1" = "0" ]; then
		color=${GREEN}
	else
		color=${RED}
	fi
	echo "[${color}\!${PEN_RESET}]"
}

function _prompt_path()
{
	echo "${WHITE}: ${GREEN}\w"
}

function _prompt_build()
{
	local is_root=$([ ${USER} == "root" ]; echo $?)
	local in_git_repos=$(ingit; echo $?)
	
	local ps1=""
	ps1+="$(_prompt_user ${is_root})"
	ps1+="$(_prompt_connection)"
	ps1+="$(_prompt_path)"
	[ $in_git_repos -eq 0 ] && ps1+="$(_prompt_git)"
	ps1+="\n"
	ps1+="$(_prompt_history $1)"
	ps1+="$(_prompt_caret $is_root) "

	# Set title of current xterm:
	ps1+="\[\e]0;[\u@\h] \w\a\]"

	# append history from this session to the history file
	history -a

	# set prompt line 1
	export PS1="$ps1"

	# set prompt line 2
	export PS2="\[${YELLOW}\]→ \[${PEN_RESET}\]"
}

PROMPT_COMMAND="_prompt_build \$?"

