# Linux and OS X (via `/usr/bin/launch -l` terminal options) spawn interactive non-login shells
# `.bashrc` is therefore the main dotfile for environment configuration

# start ssh-agent, using existing agent if available;
# note this is not absolutely necessary if the window manager is set to 
# auto-start ssh-agent on first use (e.g. as with OS X ssh-agent launchd integration);
start_ssh_agent () {
	# detect if ssh-agent is running
	# &> redirects stdout and stderr
	# (equivalent to > /dev/null 2>&1)
	ssh-add -l &> /dev/null
		
	# test (with expansion) the exit status (2 means actual error)
	if [ "$?" == 2 ]; then
		# test exists and is readable ( -r )
		[[ -r ~/.ssh-agent ]] && \
			# "	--> so we get expansion
			# $()	--> command substitution 
			eval "$(< ~/.ssh-agent)" > /dev/null
		
		ssh-add -l &> /dev/null
		if [ "$?" == 2 ]; then
			# scope the umask to the file using subshell
			# u=rwx,go=e,
			# ssh-agent prints the necessary shell commands
			# to launch ssh-agent
			(umask 066; ssh-agent > ~/.ssh-agent) 
			eval "$(< ~/.ssh-agent)" > /dev/null
			ssh-add			

			# kill ssh-agent on shell exit (EXIT)
			# note $SSH_AGENT_PID is not set for system ssh-agent
			# so this will only kill shell launched agents
			trap "kill $SSH_AGENT_PID" EXIT
		fi
	fi
}

# called when run from an non-interactive shell
non_interactive_shell () {
}

# called when run from an interactive shell
interactive_shell () {
	start_ssh_agent
}

# `.bashrc` is pointed to by $BASH_ENV for non-interactive shells
# Hence this file is split into interactive (e.g terminal) and non-interfactive (e.g. Cron) sections
[[ $- == *i* ]] && interactive || non_interactive
